Script started on Tue Feb  5 12:27:33 2019
bash-3.2$ cat run.sh
a=$1
echo "Program:"
cat $a.c
echo "Compile: gcc $a.c -o $a -w"
gcc $a.c -o $a -w
echo "Output:"
./$a
bash-3.2$ ./run.sh 1
Program:
#include<stdio.h>
#include<unistd.h>
main()
{
    fork();
    printf("Hello world\n");
}
Compile: gcc 1.c -o 1 -w
Output:
Hello world
Hello world
bash-3.2$ ./run.sh 2
Program:
#include<stdio.h>
#include<unistd.h>
main()
{
    printf("Before fork\n");
    fork();
    printf("Hello world\n");
}

Compile: gcc 2.c -o 2 -w
Output:
Before fork
Hello world
Hello world
bash-3.2$ ./run.sh 3
Program:
#include<stdio.h>
#include<unistd.h>
main()
{
    pid_t pro_id;
    printf("Before fork\n");
    pro_id = fork();
    if(pro_id == 0) // Child process
    {
        printf("Hello world from child\n");
    }
    else if(pro_id > 0) // parent process
    {
        printf("Hello world from parent\n");
    }
    else
        printf("Fork failure\n");
}
Compile: gcc 3.c -o 3 -w
Output:
Before fork
Hello world from parent
Hello world from child
bash-3.2$ ./run.sh 4
Program:
#include<stdio.h>
#include<unistd.h>
main()
{
    pid_t pro_id;
    printf("Before fork\n");
    pro_id = fork();
    if(pro_id == 0) // Child process
    {
        for(int i = 0; i < 10; i++)
            printf("Hello world from child\n");
    }
    else if(pro_id > 0) // parent process
    {
        for(int i = 0; i < 10; i++)
            printf("Hello world from parent\n");
    }
    else
        printf("Fork failure\n");
}

Compile: gcc 4.c -o 4 -w
Output:
Before fork
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from parent
Hello world from child
Hello world from child
Hello world from child
Hello world from child
Hello world from child
Hello world from child
Hello world from child
Hello world from child
Hello world from child
Hello world from child
bash-3.2$ ./run.sh 5
Program:
#include<stdio.h>
#include<unistd.h>
main()
{
    pid_t pro_id;
    pro_id = fork();
    if(pro_id == 0)
    {
        printf("Child ID: %d Parent ID: %d \n",getpid(),getppid());
    }
    else if(pro_id > 0)
    {
        printf("Parent ID: %d Parent's Parent ID: %d \n",getpid(),getppid());
    }
    else printf("Fork failure\n");
}
Compile: gcc 5.c -o 5 -w
Output:
Parent ID: 30739 Parent's Parent ID: 30734 
Child ID: 30740 Parent ID: 1 
bash-3.2$ ./run.sh 6
Program:
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
main()
{
    pid_t p;
    p = fork();
    if(p == 0)
    {
        sleep(2);
        printf("Hello after 2s!\n");
    }
    else if(p > 0)
    {
        printf("Hello!\n");
        wait(NULL);
        printf("Child over, now exit.\n");
        exit(0);
    }
}
Compile: gcc 6.c -o 6 -w
Output:
Hello!
Hello after 2s!
Child over, now exit.
bash-3.2$ ./run.sh 7
Program:
#include<stdio.h>
#include<unistd.h>
main()
{
    pid_t pro_id;
    printf("Before fork\n");
    pro_id = fork();
    if(pro_id == 0) // Child process
    {
        execl("/bin/ls","ls",NULL);
        printf("Hello world from child\n"); // Not executed if execl() successful
	// Current process image is replaced by the execl()
    }
    else if(pro_id > 0) // parent process
    {
        printf("Hello world from parent\n");
    }
    else
        printf("Fork failure\n");
}
Compile: gcc 7.c -o 7 -w
Output:
Before fork
Hello world from parent
bash-3.2$ 
1		3		5.c		8		run.sh
1.c		3.c		6		8.c
1b.txt		4		6.c		9
2		4.c		7		9.c
2.c		5		7.c		file1.txt

bash-3.2$ ./run.sh 8
Program:
#include<stdio.h>
#include<stdlib.h>
#include<dirent.h>
struct dirent *d;
int main(int argc, char *argv[])
{
    char buff[100] = "../Ex2";
    DIR *dirp;
    if((dirp=opendir(buff))==NULL)
    {
        printf("The given directory does not exist");
        exit(1);
    }
    while((d=readdir(dirp)))
    {
        printf("%s\n",d->d_name);
    }
    closedir(dirp);
}

Compile: gcc 8.c -o 8 -w
Output:
.
..
myls
myls.c
bash-3.2$ ./run.sh 9
Program:
#include<stdio.h>
#include<fcntl.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
main(int argc, char* argv[])
{
    int fd;
    char buf[100];
    int i = 1;
    if((fd = open("file1.txt", O_WRONLY | O_CREAT, 00666))==-1)
    {
        printf("Cannot create\n");
        exit(1);
    }
    write(fd,"Hello world",11);
    int fd1 = open("file1.txt", O_RDONLY, 0);
    read(fd1,buf,11);
    printf("%s\n",buf);
    close(fd);
    close(fd1);
}
Compile: gcc 9.c -o 9 -w
Output:
Hello world
bash-3.2$ cat file1.txt
Hello world
bash-3.2$ exit
exit

Script done on Tue Feb  5 12:29:27 2019
